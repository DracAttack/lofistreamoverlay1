24/7 passive stream display that should:

Keep looping seamlessly

Not restart or flash on browser refresh

Require no user interaction

Be totally reliable in OBS browser source mode

Let‚Äôs fix that with surgical precision.

üî• THE CORE ISSUES:
Videos reset or flicker on refresh

Playback doesn‚Äôt resume cleanly

Autoplay might fail silently (especially with multiple videos or scheduling)

üß† WHY THIS HAPPENS:
‚ùå Problem 1: React re-renders forcibly reset <video> playback
When the component re-renders (from layout load, WebSocket reconnect, or even parent reflow), it does something like:

ts
Copy
Edit
videoRef.current.src = source;
videoRef.current.load();
This forcibly resets the player to the start.

‚ùå Problem 2: Browser autoplay policy
Browsers often block autoplay unless:

The video is muted

The video is inline

autoplay, playsInline, and loop are explicitly set

‚ùå Problem 3: React unmounts and remounts your video layers
Every time your layout refreshes, React might be doing:

ts
Copy
Edit
<Layer key={layer.id} ... />
If key changes or layers are sorted differently, it kills the DOM node and resets playback.

‚úÖ HOW TO FIX FOR 24/7 PLAYBACK
‚úÖ 1. Video props: Full streaming-friendly setup
Update your <video> tag to:

tsx
Copy
Edit
<video
  ref={videoRef}
  src={source}
  autoPlay
  muted
  loop
  playsInline
  preload="auto"
  disablePictureInPicture
  controls={false}
  style={{ width: "100%", height: "100%", objectFit: "cover" }}
/>
This makes it bulletproof:

loop handles replay without JS

muted + autoplay avoids browser restrictions

preload="auto" helps with fast start

playsInline required for mobile and embedded use

disablePictureInPicture removes system UI glitches in Chrome

‚úÖ 2. NEVER manually call .load() in production
You currently have logic like:

ts
Copy
Edit
videoRef.current.load();
videoRef.current.play();
This resets the stream. Remove it. Use just:

ts
Copy
Edit
videoRef.current.play().catch(() => {});
Only call load() when you're changing the video src, and even then, defer it.

‚úÖ 3. Keep video component stable with React.memo and strict keys
Prevent unneeded re-renders by memoizing video layers:

tsx
Copy
Edit
const LayerVideo = React.memo(({ layer }: { layer: Layer }) => {
  return (
    <video
      key={layer.id} // keep key stable unless source changes
      src={layer.content.source}
      muted
      autoPlay
      loop
      playsInline
      preload="auto"
    />
  );
});
And don‚Äôt re-sort or reshuffle the layer array on every render.

‚úÖ 4. Cache layout to avoid reload jitter on reconnect
In your StreamOutput, avoid layout flickering by setting:

tsx
Copy
Edit
useQuery(['/api/layers'], {
  refetchInterval: 10000,
  refetchOnWindowFocus: false,
  keepPreviousData: true,
});
This holds the DOM stable across reconnects.

‚úÖ TL;DR ‚Äî Make It 24/7 Stable:

Fix	Why
Use loop autoplay muted playsInline on all videos	Ensures browser will play them on load
Remove all .load() calls	Prevents stream reset on each render
Memoize layers	Avoid DOM wipe and flicker
Don‚Äôt shuffle layer order or keys	Prevent React from remounting video tags
Cache layout in StreamOutput	Avoids rapid resets from reconnect or polling
Use preload="auto"	Helps OBS keep videos warm between frame stalls